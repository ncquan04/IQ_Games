// StrangeSignals.tsx - Component ch√≠nh cho tr√≤ ch∆°i Strange Signals
// S·ª≠ d·ª•ng React Native v√† qu·∫£n l√Ω tr·∫°ng th√°i m√†n ch∆°i, c·∫•p ƒë·ªô kh√≥, ƒëi·ªÉm s·ªë, hi·ªáu ·ª©ng chuy·ªÉn m√†n...

import { View, Text, Dimensions, StatusBar } from 'react-native'
import React, { useEffect, useRef, useState } from 'react'
import Header from '../../components/Header'
import { useStorage } from '../../hooks/useStorage';

import difficulties from './data/difficulties.json'
import Grid from './components/Grid';
import { ANIMATION_CONFIG } from './config/animationConfig';

const StrangeSignals = () => {
    // L∆∞u tr·ªØ c·∫•p ƒë·ªô kh√≥ hi·ªán t·∫°i v√†o local storage (gi·ªØ l·∫°i khi tho√°t app)
    const [storedDifficulty, setStoredDifficulty] = useStorage('strangeSignalsDifficulty', '0');
    // Bi·∫øn tham chi·∫øu cho c√°c tr·∫°ng th√°i ch√≠nh c·ªßa game
    const difficulty = useRef<number>(parseInt(storedDifficulty)); // C·∫•p ƒë·ªô kh√≥ hi·ªán t·∫°i
    const level = useRef<number>(0); // M√†n ch∆°i hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 0)
    const displayLevel = useRef<number>(1); // S·ªë m√†n hi·ªÉn th·ªã cho ng∆∞·ªùi ch∆°i (b·∫Øt ƒë·∫ßu t·ª´ 1)
    const pointsRef = useRef<number>(0); // ƒêi·ªÉm s·ªë c·ªßa ng∆∞·ªùi ch∆°i
    const hadIncorrectRef = useRef<boolean>(false); // ƒê√£ t·ª´ng ch·ªçn sai trong to√†n b·ªô game ch∆∞a
    const hadIncorrectInLevelRef = useRef<boolean>(false); // ƒê√£ ch·ªçn sai trong m√†n hi·ªán t·∫°i ch∆∞a
    const isShowingBulbsRef = useRef<boolean>(true); // ƒêang hi·ªÉn th·ªã c√°c vi√™n ƒë√° qu√Ω (bulbs)
    const gameOverRef = useRef<boolean>(false); // Tr·∫°ng th√°i k·∫øt th√∫c m√†n ch∆°i
    const isChangingLevelRef = useRef<boolean>(false); // ƒêang chuy·ªÉn m√†n
    const [selectedCount, setSelectedCount] = useState<number>(0); // S·ªë √¥ ƒë√£ ch·ªçn trong m√†n hi·ªán t·∫°i

    const [ , triggerRerender] = useState<number>(0); // D√πng ƒë·ªÉ trigger rerender th·ªß c√¥ng

    // C·∫•u h√¨nh game cho m√†n hi·ªán t·∫°i (s·ªë l∆∞·ª£ng bulbs c·∫ßn ch·ªçn)
    const gameConfigRef = useRef({
        BULBS_COUNT: difficulties[difficulty.current].levels[level.current].BULBS_COUNT,
    });

    // H√†m b·∫Øt ƒë·∫ßu l·∫°i m√†n ch∆°i (reset tr·∫°ng th√°i, hi·ªÉn th·ªã bulbs, v.v.)
    const startGame = () => {
        isShowingBulbsRef.current = true;
        gameConfigRef.current = {
            BULBS_COUNT: difficulties[difficulty.current].levels[level.current].BULBS_COUNT,
        };
        isChangingLevelRef.current = false;
        gameOverRef.current = false;
        hadIncorrectInLevelRef.current = false;
        setSelectedCount(0);

        // Sau m·ªôt kho·∫£ng th·ªùi gian, ·∫©n c√°c bulbs v√† b·∫Øt ƒë·∫ßu ch∆°i
        setTimeout(() => {
            isShowingBulbsRef.current = false;
            triggerRerender((prev) => prev + 1);
        }, difficulties[difficulty.current].levels[level.current].BULBS_COUNT * 500 + 500);
    }

    // H√†m chuy·ªÉn m√†n ch∆°i, x·ª≠ l√Ω logic tƒÉng m√†n, tƒÉng c·∫•p ƒë·ªô kh√≥, reset tr·∫°ng th√°i
    const changeLevel = () => {
        isChangingLevelRef.current = true; // ƒê√°nh d·∫•u ƒëang chuy·ªÉn m√†n
        triggerRerender((prev) => prev + 1);
        
        // N·∫øu c√≥ ch·ªçn sai, gi·ªØ nguy√™n m√†n; n·∫øu kh√¥ng, tƒÉng m√†n l√™n 1
        let newLevel = hadIncorrectInLevelRef.current ? level.current : level.current + 1;
        let newDifficulty = difficulty.current; // Gi·ªØ nguy√™n c·∫•p ƒë·ªô kh√≥ ban ƒë·∫ßu
        displayLevel.current++; // TƒÉng s·ªë m√†n hi·ªÉn th·ªã cho ng∆∞·ªùi ch∆°i
        
        // N·∫øu c√≥ ch·ªçn sai trong m√†n n√†y, ƒë√°nh d·∫•u l√† ƒë√£ c√≥ sai trong to√†n b·ªô game
        if (hadIncorrectInLevelRef.current) {
            hadIncorrectRef.current = true;        
        }

        // N·∫øu ƒë√£ ho√†n th√†nh h·∫øt c√°c m√†n c·ªßa c·∫•p ƒë·ªô kh√≥ hi·ªán t·∫°i
        if (displayLevel.current > difficulties[newDifficulty].levels.length) {
            pointsRef.current = 0;
            newLevel = 0; // Reset v·ªÅ m√†n ƒë·∫ßu ti√™n
            displayLevel.current = 1; // Reset s·ªë m√†n hi·ªÉn th·ªã v·ªÅ 1
            
            // N·∫øu ch∆∞a c√≥ l·∫ßn ch·ªçn sai n√†o, tƒÉng c·∫•p ƒë·ªô kh√≥; n·∫øu kh√¥ng, gi·ªØ nguy√™n
            newDifficulty = hadIncorrectRef.current ? difficulty.current : difficulty.current + 1;
            
            // N·∫øu v∆∞·ª£t qu√° s·ªë c·∫•p ƒë·ªô kh√≥, quay l·∫°i c·∫•p ƒë·ªô ƒë·∫ßu ti√™n
            if (newDifficulty > difficulties.length) {
                newDifficulty = 0;
            }
            
            // L∆∞u c·∫•p ƒë·ªô kh√≥ m·ªõi v√†o b·ªô nh·ªõ c·ª•c b·ªô
            setStoredDifficulty(newDifficulty.toString());
        }        
        // C·∫≠p nh·∫≠t m√†n ch∆°i v√† c·∫•p ƒë·ªô kh√≥ hi·ªán t·∫°i
        level.current = newLevel;
        difficulty.current = newDifficulty;    
    }

    // useEffect theo d√µi s·ªë √¥ ƒë√£ ch·ªçn, x·ª≠ l√Ω khi ƒë·ªß ƒëi·ªÅu ki·ªán k·∫øt th√∫c m√†n
    useEffect(() => {
        // N·∫øu ch∆∞a ch·ªçn ƒë·ªß s·ªë ƒë√° qu√Ω c·∫ßn thi·∫øt v√† ch∆∞a ch·ªçn sai, kh√¥ng l√†m g√¨ c·∫£
        if ((selectedCount < gameConfigRef.current.BULBS_COUNT) && !hadIncorrectInLevelRef.current) {
            return;
        } else {            
            // T√≠nh to√°n t·ªïng th·ªùi gian cho t·∫•t c·∫£ √¥ bi·∫øn m·∫•t (hi·ªáu ·ª©ng)
            const tilesCount = difficulties[difficulty.current].levels[level.current].GRID_WIDTH * 
                              difficulties[difficulty.current].levels[level.current].GRID_HEIGHT;
            const lastTileDelay = (tilesCount - 1) * ANIMATION_CONFIG.TILE_DELAY_INCREMENT; // ƒê·ªô tr·ªÖ cho m·ªói √¥
            const exitAnimationDuration = lastTileDelay + ANIMATION_CONFIG.TILE_FADE_OUT_DURATION; // T·ªïng th·ªùi gian hi·ªáu ·ª©ng
            
            // K√≠ch ho·∫°t tr·∫°ng th√°i k·∫øt th√∫c m√†n nh∆∞ng gi·ªØ hi·ªÉn th·ªã ƒë√° qu√Ω cho ƒë·∫øn khi ho√†n t·∫•t hi·ªáu ·ª©ng
            gameOverRef.current = true;
            triggerRerender((prev) => prev + 1);
            
            // ƒê·ª£i hi·ªáu ·ª©ng xong r·ªìi chuy·ªÉn m√†n
            setTimeout(() => {
                isShowingBulbsRef.current = false;
                triggerRerender((prev) => prev + 1);
                
                // Chuy·ªÉn sang m√†n ti·∫øp theo
                changeLevel();
                
                // B·∫Øt ƒë·∫ßu m√†n m·ªõi sau m·ªôt kho·∫£ng th·ªùi gian ch·ªù
                setTimeout(() => {
                    startGame();
                }, ANIMATION_CONFIG.LEVEL_TRANSITION_DELAY);
            }, exitAnimationDuration);
        }
    }, [selectedCount]);

    // useEffect kh·ªüi t·∫°o game khi component mount
    useEffect(() => {
        startGame();
    }, [])

    // Giao di·ªán ch√≠nh c·ªßa tr√≤ ch∆°i
    return (
        <View style={{ width: Dimensions.get('window').width, height: Dimensions.get('window').height, backgroundColor: '#1c535e', paddingTop: StatusBar.currentHeight }}>
            <View style={{ flex: 1, flexDirection: 'column', justifyContent: 'space-between', alignItems: 'center' }}>
                {/* Header hi·ªÉn th·ªã th√¥ng tin m√†n ch∆°i, ƒëi·ªÉm s·ªë */}
                <Header
                    currentLevel={displayLevel.current}
                    totalLevels={difficulties[difficulty.current].levels.length}
                    currentScore={pointsRef.current}
                />

                <View style={{ width: '100%', paddingHorizontal: 10, flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>
                    {/* Hi·ªÉn th·ªã l∆∞·ªõi game n·∫øu kh√¥ng trong tr·∫°ng th√°i chuy·ªÉn m√†n */}
                    {!isChangingLevelRef.current && (
                        <>
                            <View style={{ width: '90%', paddingVertical: 3, backgroundColor: 'rgba(10, 31, 36, 0.3)', borderRadius: 30, alignItems: 'center' }}>
                                <Text style={{ color: 'white', fontSize: 16, fontWeight: 500 }}>Follow the bulbs üí°</Text>
                            </View>
                            <View style={{ width: '100%', marginTop: 10, justifyContent: 'center', alignItems: 'center' }}>
                                <Grid
                                    key={`grid-${difficulty.current}-${level}`}
                                    difficulty={difficulty.current}
                                    level={level.current}
                                    hadIncorrectInLevelRef={hadIncorrectInLevelRef}
                                    isShowingBulbs={isShowingBulbsRef.current}
                                    selectedCount={selectedCount}
                                    setSelectedCount={setSelectedCount}
                                    gameOver={gameOverRef.current}
                                    pointsRef={pointsRef}
                                />
                            </View>
                        </>)}
                </View>

                <View />
            </View>
        </View>
    )
}

export default StrangeSignals